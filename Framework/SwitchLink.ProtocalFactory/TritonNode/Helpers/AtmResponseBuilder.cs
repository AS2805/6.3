using System;
using System.Linq;
using System.Text;
using Common.Logging;
using SwitchLink.ProtocalFactory.Helper;
using SwitchLink.ProtocalFactory.TritonNode.Models;

namespace SwitchLink.ProtocalFactory.TritonNode.Helpers
{
    public class AtmResponseBuilder
    {
        private readonly ILog _log = LogManager.GetLogger(typeof(Factory));
        private readonly MsgHelper _helper = new MsgHelper();

        private byte[] Build(string message)
        {
            return Encoding.ASCII.GetBytes(message);
        }

        public byte[] TranResponse(TransactionModel model)
        {
            _log.Debug("Starting to create transaction response");
            // Example response message 
            //<STX>            <FS>0<FS>S9218163       <FS>11<FS>4868<FS>000<FS>00000400<FS>08062015<FS>164607<FS>08062015<FS>00667243<FS>00000100<FS>t164607<FS><FS><FS><ETX>

            string InformationHeader = "            ";
            //string authorizationNum = "00000400";
            string transactionDate = DateTime.Now.ToString("MMddyy"); // Transaction Date  6 Numeric Date of transaction in MMDDYY format. Set by processor. 
            string transactionTime = DateTime.Now.ToString("HHmmss"); // Time of the transaction in HHMMSS format. Set by processor.
            string businessDate = DateTime.Now.ToString("MMddyy"); // Business date of the transaction in MMDDYY format. Set by processor.

            string builder = "";

         
            builder += InformationHeader;
            builder += "\x1C" + "0"; // Multi-Block Indicator 1 Numeric
            builder += "\x1C" + model.TerminalId;
            builder += "\x1C" + model.TransactionCode;
            builder += "\x1C" + model.AtmSeqNo.ToString("D4"); // Sequence Number  4 Numeric Copied from request message. 
            builder += "\x1C" + model.AuthorizationCode.PadLeft(3, '0'); // Response Code  3 Numeric Result of request. Approved = 000. Non-0000 = declined. See Authorization Codes for list of decline codes.
            builder += "\x1C" + model.AuthorizationNum.ToString("D8"); // Authorization Num.  8 Numeric  
            //*
            // Authorization number generated by the processor for the transaction. Right justified, zero filled to the left if not 8 characters. 
            //(note: This field is alphanumeric for Quasicash type transaction responses, Zero(030h) or space(020h) filled to the left if less than 8 characters.) 
            // */
            builder += "\x1C" + transactionDate;
            builder += "\x1C" + transactionTime;
            builder += "\x1C" + businessDate;
            builder += "\x1C" + model.Balance.ToString("D8"); // Amount 1  8 Numeric  // ACCOUNT BALANCE
            //*
            // * Balance amount. Zero filled to the left, right justified. 
            // * If space filled, no balance available (for W/D transactions) 
            // * Represents the amount in the smallest possible unit of 
            // * currency. 
            // * Amount to dispense. Use for transaction codes:
            // * "48" – Check Cashing Withdrawal. 
            // * “49” – Receive Money. 
            // *
            builder += "\x1C" + model.Amount2.ToString("D8"); // Amount 2  8 Numeric // ATM FEE
            //*
            // * Amount of actual surcharge Zero filled to the left, right 
            // * justified. Represents the amount in the smallest possible
            // * unit of currency. An ASCII minus sign (e.g. “-0000100”) in
            // * the first position represents a credit.
            // */
            builder += "\x1C" + model.Miscellaneous1; // Miscellaneous 1  Variable Alphanumeric Miscellaneous data. Refer to Miscellaneous Field ID codes for possible uses for this field. 
            builder += "\x1C" + model.Miscellaneous2; // Miscellaneous 2  Variable Alphanumeric Miscellaneous data. Refer to Miscellaneous Field ID codes for possible uses for this field. 
            builder += "\x1C" + model.MiscellaneousX; // Miscellaneous X**  Variable Alphanumeric  V  X**  Miscellaneous data. Refer to Miscellaneous Field ID codes for possible uses for this field.
            builder += "\x1C";
            builder += "\x03";
            //builder = "\x02" + builder + HexStringToString(CalculateChecksum(builder));
            builder = "\x02" + builder + CalcLRC(builder);

            byte[] result = Build(builder);
            string encode = _helper.AsciiOctets2String(result);
            _log.Debug("Message sent to ATM: " + encode);
            model.Text = encode;
            return result;
        }

        public byte[] ConfigResponse(ConfigModel model)
        {
            string InformationHeader = "";
            string builder = "";

       
            //builder += "\x1C" + InformationHeader.PadRight(12, ' ');
            builder += InformationHeader.PadRight(12, ' ');
            builder += "\x1C" + model.TerminalId.PadRight(15, ' '); 
            builder += "\x1C" + model.TransactionCode;
            builder += "\x1C~"+ model.EncryptedPinKey1;
            builder += "\x1C{"+ model.EncryptedPinKey2;
            builder += "\x03";
            builder = "\x02" + builder + CalcLRC(builder);

            byte[] result = Build(builder);
            string encode = _helper.AsciiOctets2String(result);
            _log.Debug("Message sent to ATM: " + encode);
            model.Text = encode;
            return result;
        }

        public byte[] HostTotalResponse(HostTotalModel model)
        {
            //    // Example Host Totals Response Message 
    
            string InformationHeader = "            "; // 12 ASCII Char. Not used as of this release, must be space filled
            string businessDate = DateTime.Now.ToString("MMddyy"); // Business date of the transaction in MMDDYY format. Set by processor.

            string builder = "";


            builder += InformationHeader.PadRight(12, ' ');
            builder += "\x1C" + "0"; // Multi-Block Indicator 1 Numeric
            builder += "\x1C" + model.TerminalId; // 15 Alphanumeric Terminal ID. Assigned by processor. Left justified, space filled to the right. 
            builder += "\x1C" + model.TransactionCode; // 2 Alphanumeric Code indicating type of transaction being done. See Transaction Codes table.
            //builder += "\x1C" + businessDate; // 6 Numeric 
            builder += "\x1C";
            builder += model.NoOfWithdrawals.ToString("D4"); // No. of Withdrawals  4 Numeric Total number of withdrawals since the last request for totals. Zero or space filled to the left.
            builder += model.NoOfInquiries.ToString("D4"); // No. of Inquiries  4 Numeric Total number of inquiries since the last request for totals. Zero or space filled to the left. 
            builder += model.NoOfTransfers.ToString("D4");// No. of Transfers  4 Numeric Total number of transfers since the last request for totals. Zero or space filled to the left. 
            builder += model.Settlement.ToString("D8"); /* Settlement  8 Numeric  F  X  Total amount of all withdrawals. Zero or space filled to left, right justified. Represents the amount in the smallest 
                                                      possible unit of currency.*/
            builder += "\x1C" + model.MiscellaneousX;
            builder += "\x1C";
            builder += "\x03";
            builder = "\x02" + builder + CalcLRC(builder);

            byte[] result = Build(builder);
            string encode = _helper.AsciiOctets2String(result);
            _log.Debug("Message sent to ATM: " + encode);
            model.Text = encode;
            return result;
        }

        public byte[] ReversalResponse(ReversalModel model)
        {
            // Example Reversal response message 
            //

            string InformationHeader = "            ";

            string builder = "";
       
            builder += InformationHeader;
            builder += "\x1C" + model.TerminalId;
            builder += "\x1C" + model.TransactionCode;
            builder += "\x1C" + model.AtmSeqNo.ToString("D4"); // Sequence Number  4 Numeric Copied from request message. 
            builder += "\x1C" + model.AuthorizationCode.PadLeft(3, '0'); // Response Code  3 Numeric Result of request. Approved = 000. Non-0000 = declined. See Authorization Codes for list of decline codes.
            builder += "\x1C" + model.MiscellaneousX; // Miscellaneous X**  Variable Alphanumeric  V  X**  Miscellaneous data. Refer to Miscellaneous Field ID codes for possible uses for this field.
            builder += "\x1C";
            builder += "\x03";
            //builder  = "\x02" + builder + HexStringToString(CalculateChecksum(builder));
            builder = "\x02" + builder + CalcLRC(builder);


            byte[] result = Build(builder);
            string encode = _helper.AsciiOctets2String(result);
            _log.Debug("Message sent to ATM: " + encode);
            model.Text = encode;
            return result;
        }

        private char CalcLRC(string packet)
        {
            int lcr = packet.Aggregate(0, (current, bit) => current ^ bit);
            return (char)lcr;
        }

    }
}
